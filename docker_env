#!/usr/bin/env bash
# Usage: ci_build.sh <COMMAND>
#
# COMMAND: Command to be executed in the docker container, e.g.,
#          tensorflow/tools/ci_build/builds/pip.sh gpu -c opt --config=cuda

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# Dockerfile to be used in docker build
DOCKERFILE_PATH="dockerfile"
DOCKER_CONTEXT_PATH="${SCRIPT_DIR}"

DOCKER_PROXY="--build-arg https_proxy=$http_proxy --build-arg http_proxy=$http_proxy \
	      --build-arg HTTP_PROXY=$HTTP_PROXY --build-arg HTTPS_PROXY=$HTTP_PROXY \
	      --build-arg NO_PROXY=$NO_PROXY --build-arg no_proxy=$no_proxy"

DOCKER_USER="--build-arg CI_BUILD_USER=$(id -u -n) --build-arg CI_BUILD_UID=$(id -u) \
	     --build-arg CI_BUILD_GROUP=$(id -g -n) --build-arg CI_BUILD_GID=$(id -g)"

CI_BUILD_USER=$(id -u -n)

if [[ ! -f "${DOCKERFILE_PATH}" ]]; then
  die "Invalid Dockerfile path: \"${DOCKERFILE_PATH}\""
fi

COMMAND=("$@")

# Validate command line arguments.
if [ "$#" -lt 1 ] || [ ! -e "${DOCKERFILE_PATH}" ]; then
  >&2 echo "Usage: $(basename $0) COMMAND"
  >&2 echo "       COMMAND is a command (with arguments) to run inside"
  >&2 echo "               the container."
  >&2 echo ""
  >&2 echo "Example (run all tests on CPU):"
  >&2 echo "$0 bazel test //tensorflow/..."
  exit 1
fi

# Set up WORKSPACE and BUILD_TAG. Jenkins will set them for you or we pick
# reasonable defaults if you run it outside of Jenkins.
WORKSPACE="${WORKSPACE:-${SCRIPT_DIR}}"
BUILD_TAG="${BUILD_TAG:-greennet}"

# Determine the docker image name
DOCKER_IMG_NAME="${BUILD_TAG}:${CI_BUILD_USER}"

# Under Jenkins matrix build, the build tag may contain characters such as
# commas (,) and equal signs (=), which are not valid inside docker image names.
DOCKER_IMG_NAME=$(echo "${DOCKER_IMG_NAME}" | sed -e 's/=/_/g' -e 's/,/-/g')

# Convert to all lower-case, as per requirement of Docker image names
DOCKER_IMG_NAME=$(echo "${DOCKER_IMG_NAME}" | tr '[:upper:]' '[:lower:]')

CI_DOCKER_NAME=${BUILD_TAG}_$((`date '+%s'`*100+`date '+%N'`/1000000))

# Print arguments.
echo "WORKSPACE: ${WORKSPACE}"
echo "CI_DOCKER_BUILD_EXTRA_PARAMS: ${CI_DOCKER_BUILD_EXTRA_PARAMS[*]}"
echo "CI_DOCKER_EXTRA_PARAMS: ${CI_DOCKER_EXTRA_PARAMS[*]}"
echo "CI_BUILD_USER: ${CI_BUILD_USER}"
echo "COMMAND: ${COMMAND[*]}"
echo "BUILD_TAG: ${BUILD_TAG}"
echo "  (docker container name will be ${DOCKER_IMG_NAME})"
echo ""

# Build the docker container.
echo "Building container (${DOCKER_IMG_NAME})..."
sudo docker build ${DOCKER_USER} ${DOCKER_PROXY} \
    -t ${DOCKER_IMG_NAME} ${CI_DOCKER_BUILD_EXTRA_PARAMS[@]} \
    -f "${DOCKERFILE_PATH}" "${DOCKER_CONTEXT_PATH}"

# Check docker build status
if [[ $? != "0" ]]; then
  die "ERROR: docker build failed. Dockerfile is at ${DOCKERFILE_PATH}"
fi

# Run the command inside the container.
echo "Running '${COMMAND[*]}' inside ${DOCKER_IMG_NAME}..."

# By default we cleanup - remove the container once it finish running (--rm)
# and share the PID namespace (--pid=host) so the process inside does not have
# pid 1 and SIGKILL is propagated to the process inside (jenkins can kill it).
sudo docker run --rm --privileged=true --pid=host \
    -v ${WORKSPACE}:${WORKSPACE} \
    -w ${WORKSPACE} \
    --name $CI_DOCKER_NAME \
    ${CI_DOCKER_EXTRA_PARAMS[@]} \
    "${DOCKER_IMG_NAME}" \
    ${COMMAND[@]}